version: '3.8'

services:
  # DevSecOps Platform Application
  app:
    build: .
    container_name: devsecops-platform
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - APP_ENVIRONMENT=production
      - DB_HOST=postgres
      - VAULT_ADDR=http://vault:8200
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - vault
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - devsecops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: devsecops-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: devsecops
      POSTGRES_USER: devsecops
      POSTGRES_PASSWORD: ${DB_PASSWORD:-devsecops_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - devsecops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U devsecops"]
      interval: 10s
      timeout: 5s
      retries: 5

  # HashiCorp Vault (Development - replace with external in production)
  vault:
    image: vault:1.15
    container_name: devsecops-vault
    restart: unless-stopped
    cap_add:
      - IPC_LOCK
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-demo-vault-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
      VAULT_ADDR: http://0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
      - ./config/vault:/vault/config
    networks:
      - devsecops-network
    command: vault server -dev -dev-root-token-id=${VAULT_TOKEN:-demo-vault-token}

  # Redis (for caching and sessions)
  redis:
    image: redis:7-alpine
    container_name: devsecops-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - devsecops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: devsecops-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - devsecops-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana (Dashboards)
  grafana:
    image: grafana/grafana:latest
    container_name: devsecops-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana:/etc/grafana/provisioning
    networks:
      - devsecops-network

  # Nginx (Reverse Proxy)
  nginx:
    image: nginx:alpine
    container_name: devsecops-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    networks:
      - devsecops-network

volumes:
  postgres_data:
  vault_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  devsecops-network:
    driver: bridge
