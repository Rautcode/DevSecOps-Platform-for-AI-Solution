name: Production Deployment

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/devsecops-platform-for-ai-solution

jobs:
  pre-deployment-checks:
    name: Pre-deployment Security Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run comprehensive security scan
      run: |
        echo "üîç Running pre-deployment security checks..."
        
        # Platform validation
        python scripts/validate_platform.py || true
        
        # Security validation
        mkdir -p sample_model
        echo "# Sample model" > sample_model/README.md
        python scripts/ai_model_scanner.py sample_model || true
        
        # Health check
        python scripts/health_check.py || true
    
    - name: Verify production configuration
      run: |
        echo "‚öôÔ∏è Verifying production configuration..."
        python -c "
        from src.core.production_config import get_production_config
        config = get_production_config()
        print(f'Environment: {config.environment}')
        print(f'Debug: {config.debug}')
        assert not config.debug, 'Debug mode must be disabled in production'
        print('‚úÖ Production configuration verified')
        "

  build-production-image:
    name: Build Production Docker Image
    runs-on: ubuntu-latest
    needs: [pre-deployment-checks]
    
    permissions:
      contents: read
      packages: write
    
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=tag
          type=raw,value=production-{{date 'YYYYMMDD-HHmmss'}}
          type=raw,value=production-latest
    
    - name: Build and push production image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          ENVIRONMENT=production

  security-scan-production:
    name: Production Image Security Scan
    runs-on: ubuntu-latest
    needs: [build-production-image]
    
    permissions:
      security-events: write
    
    steps:
    - name: Run Trivy scan on production image
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-production-image.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-production.sarif'
        exit-code: '0'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-production.sarif'
      continue-on-error: true
    
    - name: Check for critical vulnerabilities
      run: |
        echo "üîç Checking for critical vulnerabilities..."
        trivy image --severity CRITICAL --exit-code 1 ${{ needs.build-production-image.outputs.image-tag }}

  deploy-to-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-production-image, security-scan-production]
    environment: staging
    if: github.event.inputs.environment == 'staging' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to staging environment
      run: |
        echo "üöÄ Deploying to staging..."
        echo "Image: ${{ needs.build-production-image.outputs.image-tag }}"
        
        # Simulate deployment (replace with actual deployment logic)
        echo "Updating docker-compose for staging..."
        echo "Running database migrations..."
        echo "Updating configuration..."
        echo "Starting services..."
    
    - name: Wait for deployment
      run: |
        echo "‚è≥ Waiting for deployment to complete..."
        sleep 30
    
    - name: Run staging smoke tests
      run: |
        echo "üß™ Running staging smoke tests..."
        # Add your staging smoke tests here
        curl -f http://staging.example.com/health || echo "Health check failed"

  staging-validation:
    name: Staging Environment Validation
    runs-on: ubuntu-latest
    needs: [deploy-to-staging]
    if: github.event.inputs.environment == 'staging' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pytest
    
    - name: Run staging integration tests
      env:
        STAGING_URL: https://staging.example.com
        API_KEY: ${{ secrets.STAGING_API_KEY }}
      run: |
        echo "üß™ Running staging integration tests..."
        # Add your staging integration tests here
        python -c "
        import requests
        import os
        
        base_url = os.getenv('STAGING_URL', 'http://localhost:8000')
        
        # Health check
        response = requests.get(f'{base_url}/health')
        assert response.status_code == 200, f'Health check failed: {response.status_code}'
        
        # API check
        response = requests.get(f'{base_url}/api/v1')
        assert response.status_code in [200, 404], f'API check failed: {response.status_code}'
        
        print('‚úÖ Staging validation passed')
        "

  deploy-to-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-production-image, security-scan-production, staging-validation]
    environment: production
    if: (github.event.inputs.environment == 'production' && github.event.inputs.force_deploy == 'true') || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Create deployment backup
      run: |
        echo "üíæ Creating deployment backup..."
        # Add backup logic here
        echo "Backup completed"
    
    - name: Deploy to production
      run: |
        echo "üöÄ Deploying to production..."
        echo "Image: ${{ needs.build-production-image.outputs.image-tag }}"
        
        # Add your production deployment logic here
        echo "Updating production docker-compose..."
        echo "Running database migrations..."
        echo "Updating production configuration..."
        echo "Rolling out new services..."
        echo "Updating load balancer configuration..."
    
    - name: Verify deployment
      run: |
        echo "‚úÖ Verifying production deployment..."
        # Add production verification logic
        echo "Production deployment verified"

  post-deployment:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: always() && needs.deploy-to-production.result == 'success'
    
    steps:
    - name: Update monitoring and alerting
      run: |
        echo "üìä Updating monitoring dashboards..."
        echo "üîî Configuring alerts for new deployment..."
    
    - name: Run production smoke tests
      run: |
        echo "üß™ Running production smoke tests..."
        # Add production smoke tests
        curl -f https://production.example.com/health || echo "Production health check failed"
    
    - name: Send deployment notification
      run: |
        echo "üì¢ Sending deployment notifications..."
        # Add notification logic (Slack, email, etc.)
    
    - name: Update security monitoring
      run: |
        echo "üõ°Ô∏è Updating security monitoring for new deployment..."
        # Update security monitoring configurations

  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy-to-production]
    if: failure() && needs.deploy-to-production.result == 'failure'
    environment: production
    
    steps:
    - name: Execute rollback
      run: |
        echo "üîÑ Executing rollback procedure..."
        # Add rollback logic here
        echo "Restoring previous version..."
        echo "Rollback completed"
    
    - name: Verify rollback
      run: |
        echo "‚úÖ Verifying rollback..."
        # Add rollback verification
        curl -f https://production.example.com/health
    
    - name: Send rollback notification
      run: |
        echo "üì¢ Sending rollback notifications..."
        # Add rollback notification logic
