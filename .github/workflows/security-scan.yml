name: Security Scan

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'

permissions:
  security-events: write
  contents: read
  actions: read

jobs:
  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run TruffleHog
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
      continue-on-error: true

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install pip-licenses
      run: |
        python -m pip install --upgrade pip
        pip install pip-licenses
        pip install -r requirements.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json || true
        pip-licenses --fail-on="GPL" || true
    
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.json

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        docker build -t devsecops-platform:latest .
    
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'devsecops-platform:latest'
        format: 'sarif'
        output: 'trivy-container-results.sarif'
        exit-code: '0'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-container-results.sarif'
      continue-on-error: true
    
    - name: Upload container scan artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: trivy-container-results
        path: trivy-container-results.sarif

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Checkov
      uses: bridgecrewio/checkov-action@master
      with:
        directory: .
        framework: dockerfile,docker_compose
        output_format: sarif
        output_file_path: checkov-results.sarif
      continue-on-error: true
    
    - name: Check if Checkov results exist
      id: check-file
      run: |
        if [ -f "checkov-results.sarif" ]; then
          echo "file-exists=true" >> $GITHUB_OUTPUT
          echo "Checkov SARIF file found"
        else
          echo "file-exists=false" >> $GITHUB_OUTPUT
          echo "Checkov SARIF file not found, creating empty report"
          mkdir -p reports
          echo '{"version": "2.1.0", "runs": [{"tool": {"driver": {"name": "checkov"}}, "results": []}]}' > checkov-results.sarif
        fi
    
    - name: Upload Checkov scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always() && steps.check-file.outputs.file-exists == 'true'
      with:
        sarif_file: checkov-results.sarif
      continue-on-error: true
    
    - name: Upload Checkov results as artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: checkov-results
        path: checkov-results.sarif

  sast-scan:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    permissions:
      security-events: write
      contents: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run Semgrep
      uses: semgrep/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
          p/bandit
      env:
        SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      continue-on-error: true

  compliance-check:
    name: Compliance Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Install email-validator explicitly for Pydantic email validation
        pip install email-validator
        # Install OpenTelemetry packages explicitly
        pip install opentelemetry-api opentelemetry-sdk
        pip install -r requirements.txt
    
    - name: Run security policy validation
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python scripts/validate_platform.py
    
    - name: Validate Vault configuration
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        python scripts/vault_validation.py || echo "Vault validation completed (demo mode expected)"
    
    - name: Generate compliance report
      env:
        PYTHONPATH: ${{ github.workspace }}
      run: |
        echo "# Security Compliance Report" > compliance-report.md
        echo "Generated on: $(date)" >> compliance-report.md
        echo "" >> compliance-report.md
        echo "## Platform Validation" >> compliance-report.md
        python scripts/validate_platform.py >> compliance-report.md 2>&1 || true
        echo "" >> compliance-report.md
        echo "## Vault Validation" >> compliance-report.md
        python scripts/vault_validation.py >> compliance-report.md 2>&1 || true
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v4
      with:
        name: compliance-report
        path: compliance-report.md

  security-metrics:
    name: Security Metrics Collection
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Collect security metrics
      run: |
        echo "ðŸ“Š Collecting security metrics..."
        
        # Count security-related files
        SECURITY_FILES=$(find . -name "*.py" -exec grep -l "security\|auth\|vault\|encrypt" {} \; | wc -l)
        echo "Security-related files: $SECURITY_FILES"
        
        # Count test files
        TEST_FILES=$(find tests/ -name "*.py" | wc -l)
        echo "Test files: $TEST_FILES"
        
        # Generate metrics report
        cat << EOF > security-metrics.json
        {
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "security_files": $SECURITY_FILES,
          "test_files": $TEST_FILES,
          "last_scan": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
        }
        EOF
    
    - name: Upload security metrics
      uses: actions/upload-artifact@v4
      with:
        name: security-metrics
        path: security-metrics.json
